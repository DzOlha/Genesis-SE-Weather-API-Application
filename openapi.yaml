openapi: 3.0.0
info:
  title: Weather API
  description: API for retrieving current weather information and managing weather update subscriptions
  version: 1.0.0
servers:
  - url: http://localhost:8088
    description: Local development server
paths:
  /api/weather:
    get:
      summary: Get current weather
      description: Returns the current weather information for a specified city
      operationId: getCurrentWeather
      parameters:
        - name: city
          in: query
          description: Name of the city to get weather for
          required: true
          schema:
            type: string
            minLength: 2
            maxLength: 50
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              examples:
                cityNotProvided:
                  summary: City not provided
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      city:
                        - "City parameter is required"
                cityTooShort:
                  summary: City name too short
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      city:
                        - "City name must be at least 2 characters"
                cityTooLong:
                  summary: City name too long
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      city:
                        - "City name must not exceed 50 characters"
        '404':
          description: City not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "City not found"
        '502':
          description: Weather API access error (bad gateway)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Access Weather API error"

  /api/subscribe:
    post:
      summary: Subscribe to weather updates
      description: Subscribe to receive weather updates for a specified city at a defined frequency
      operationId: subscribeToWeatherUpdates
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - email
                - city
                - frequency
              properties:
                email:
                  type: string
                  format: email
                  description: Email address to receive updates
                city:
                  type: string
                  minLength: 2
                  maxLength: 50
                  description: City name to receive weather updates for
                frequency:
                  type: string
                  enum: [ hourly, daily ]
                  description: Frequency of weather updates
          application/json:
            schema:
              type: object
              required:
                - email
                - city
                - frequency
              properties:
                email:
                  type: string
                  format: email
                  description: Email address to receive updates
                city:
                  type: string
                  minLength: 2
                  maxLength: 50
                  description: City name to receive weather updates for
                frequency:
                  type: string
                  enum: [ hourly, daily ]
                  description: Frequency of weather updates
      responses:
        '200':
          description: Subscription successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
              examples:
                newSubscription:
                  summary: New subscription created
                  value:
                    success: true
                    message: "Subscription confirmation email sent. Please check your inbox."
                tokenUpdated:
                  summary: Expired token updated
                  value:
                    success: true
                    message: "Subscription confirmation email has been resent."
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              examples:
                cityTooShort:
                  summary: City name too short
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      city:
                        - "City name must be at least 2 characters"
                cityTooLong:
                  summary: City name too long
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      city:
                        - "City name must not exceed 50 characters"
                invalidEmail:
                  summary: Invalid email address
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      email:
                        - "Invalid email address format"
                invalidFrequency:
                  summary: Invalid frequency
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      frequency:
                        - "Frequency must be one of: hourly, daily, weekly"
                dataNotProvided:
                  summary: Required data not provided
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      general:
                        - "Email, city, and frequency are required"
        '404':
          description: City not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "City not found"
        '409':
          description: Subscription already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Subscription already exists"
        '502':
          description: Weather API access error (bad gateway)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Access Weather API error"

  /api/confirm/{token}:
    get:
      summary: Confirm subscription
      description: Confirm a weather update subscription using the token sent via email
      operationId: confirmSubscription
      parameters:
        - name: token
          in: path
          description: Confirmation token received in the email
          required: true
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
      responses:
        '200':
          description: Subscription confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmationResponse'
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              examples:
                tokenTooShort:
                  summary: Token too short
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      token:
                        - "Token must be 64 characters long"
                notHexadecimal:
                  summary: Token not hexadecimal
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      token:
                        - "Token must contain only hexadecimal characters"
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Confirmation token not found"

  /api/unsubscribe/{token}:
    get:
      summary: Unsubscribe from weather updates
      description: Cancel a weather update subscription using the unsubscribe token
      operationId: unsubscribeFromWeatherUpdates
      parameters:
        - name: token
          in: path
          description: Unsubscribe token
          required: true
          schema:
            type: string
            pattern: "^[0-9a-f]{64}$"
      responses:
        '200':
          description: Successfully unsubscribed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnsubscribeResponse'
        '400':
          description: Invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
              examples:
                tokenTooShort:
                  summary: Token too short
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      token:
                        - "Token must be 64 characters long"
                notHexadecimal:
                  summary: Token not hexadecimal
                  value:
                    success: false
                    message: "Validation failed."
                    errors:
                      token:
                        - "Token must contain only hexadecimal characters"
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Unsubscribe token not found"

components:
  schemas:
    WeatherResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Indicates successful response
        message:
          type: string
          example: "Current weather for Kyiv"
          description: Human-readable message about the response
        data:
          type: object
          properties:
            temperature:
              type: number
              format: float
              example: 13.8
              description: Current temperature
            humidity:
              type: integer
              example: 63
              description: Current humidity percentage
            description:
              type: string
              example: "Patchy rain nearby"
              description: Weather condition description
          required:
            - temperature
            - humidity
            - description
      required:
        - success
        - message
        - data

    SubscriptionResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Subscription confirmation email sent. Please check your inbox."
      required:
        - success
        - message

    ConfirmationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Subscription confirmed successfully."
      required:
        - success
        - message

    UnsubscribeResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "You have been unsubscribed from weather updates."
      required:
        - success
        - message

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "An error occurred."
      required:
        - success
        - message

    ValidationErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: Indicates the request was unsuccessful due to validation errors
        message:
          type: string
          example: "Validation failed"
          description: General error message about validation failure
        errors:
          type: object
          description: Object containing validation errors by field
          additionalProperties:
            type: array
            items:
              type: string
          example:
            email:
              - "Email address is required"
            city:
              - "City name is required"
            frequency:
              - "Weather update frequency is required"
      required:
        - success
        - message
        - errors
